{"version":3,"sources":["webpack:///./node_modules/terra-dev-site/lib/loader-components/_NpmBadge.js","webpack:///./node_modules/terra-dev-site/lib/loader-components/NpmBadge.module.scss?1d27","webpack:///./packages/terra-disclosure-manager/package.json","webpack:///./packages/terra-disclosure-manager/lib/terra-dev-site/doc/disclosure-manager/DisclosingContentWithAHeader.4.doc.mdx"],"names":["Object","defineProperty","exports","value","default","_react","_interopRequireDefault","_propTypes","_bind","_NpmBadgeModule","obj","__esModule","cx","bind","propTypes","name","string","isRequired","url","version","NpmBadge","_ref","createElement","className","href","concat","_default","module","Badge","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"299-6afda2ca8f92f162833c.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _NpmBadgeModule = _interopRequireDefault(require(\"./NpmBadge.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_NpmBadgeModule.default);\n\nvar propTypes = {\n  /**\n   * component name.\n   */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n   * url to link to\n   */\n  url: _propTypes.default.string,\n\n  /**\n   * The package version.\n   */\n  version: _propTypes.default.string.isRequired\n};\n\nvar NpmBadge = function NpmBadge(_ref) {\n  var name = _ref.name,\n      url = _ref.url,\n      version = _ref.version;\n  return _react.default.createElement(\"div\", {\n    className: cx('badge-container')\n  }, _react.default.createElement(\"a\", {\n    className: cx('badge'),\n    href: url || \"https://www.npmjs.org/package/\".concat(name, \"/v/\").concat(version)\n  }, _react.default.createElement(\"span\", {\n    className: cx('badge-name')\n  }, url ? 'package' : 'npm'), _react.default.createElement(\"span\", {\n    className: cx('badge-version')\n  }, \"v\".concat(version))));\n};\n\nNpmBadge.propTypes = propTypes;\nvar _default = NpmBadge;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"NpmBadge-module__badge___3p041\",\"badge-container\":\"NpmBadge-module__badge-container___2W9ft\",\"badge-name\":\"NpmBadge-module__badge-name___2TNAy\",\"badge-version\":\"NpmBadge-module__badge-version___3bRIz\"};","import React from 'react';\nimport NpmBadge from 'terra-dev-site/lib/loader-components/_NpmBadge';\n\nexport const Badge = ({ url }) => (\n      <NpmBadge\n        name=\"terra-disclosure-manager\"\n        version=\"4.32.0\"\n        url={url}\n      />\n    );","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Badge } from 'terra-disclosure-manager/package.json?dev-site-package';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Badge mdxType=\"Badge\" />\n    <h1 {...{\n      \"id\": \"disclosing-content-with-a-header\"\n    }}>{`Disclosing Content With a Header`}</h1>\n    <p>{`Implementations of the DisclosureManager must render a header containing controls for the various disclosure management actions (close, back, maximize/minimize, etc.). `}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DisclosureManagerHeaderAdapter`}</inlineCode>{` can be used to register header information to the disclosing manager. This can be usd to register a title and a collapsibleMenuView.`}</p>\n    <h2 {...{\n      \"id\": \"disclosuremanagerheaderadapter\"\n    }}>{`DisclosureManagerHeaderAdapter`}</h2>\n    <p>{`The DisclosureManagerHeaderAdapter can be rendered by the disclosed content to inject their own component-specific contents into that header.`}</p>\n    <p><inlineCode parentName=\"p\">{`DisclosureManagerHeaderAdapter`}</inlineCode>{` Props:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Is Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`title`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`optional`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A string to render as the header's title. Used if the title was not provided as a parameter in the disclosure.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`collapsibleMenuView`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`optional`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A CollapsibleMenuView component to render within the header.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { DisclosureManagerContext, DisclosureManagerHeaderAdapter } from 'terra-disclosure-manager';\nimport Button from 'terra-button';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\n\nconst DisclosedComponent = () => {\n  const disclosureManager = React.useContext(DisclosureManagerContext);\n\n  return (\n    <React.Fragment>\n     <DisclosureManagerHeaderAdapter\n       title=\"My Disclosure Component\"\n       collapsibleMenuView={<CollapsibleMenuView />}\n     />\n      <Button\n        text=\"Close Modal\"\n        onClick={() => {\n          disclosureManager.closeDisclosure();\n        }}\n      />\n    </React.Fragment>\n  );\n};\n`}</code></pre>\n    <p>{`This will register the header information on mount.`}</p>\n    <h2 {...{\n      \"id\": \"providing-a-title-on-disclose\"\n    }}>{`Providing a Title on Disclose`}</h2>\n    <p>{`It has been observed that there can be a 'pop-in' affect with the header render in slow domains and using the `}<inlineCode parentName=\"p\">{`DisclosureManagerHeaderAdapter`}</inlineCode>{`. It is recommended to provide a `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` parameter to the disclose function that will render the disclosed content to ensure the header is rendered immediately. This will render the header with the title, and then the `}<inlineCode parentName=\"p\">{`DisclosureManagerHeaderAdapter`}</inlineCode>{` can be used to add additional button content into the header. While disclosing with a title parameter, the disclose title will have priority, even if a title value is provided through the `}<inlineCode parentName=\"p\">{`DisclosureManagerHeaderAdapter`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { DisclosureManagerContext } from 'terra-disclosure-manager';\nimport Button from 'terra-button';\nconst DisclosingComponent = () => {\n  const disclosureManager = React.useContext(DisclosureManagerContext);\n  return (\n    <Button\n      text=\"Launch Modal\"\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: 'modal',\n          content: {\n            key: 'MY-MODAL-DISCLOSURE',\n            title: 'MY-MODAL-DISCLOSURE',\n            component: <MyDisclosureComponent />,\n          }\n        });\n      }}\n    />\n  );\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}