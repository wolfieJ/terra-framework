{"version":3,"sources":["webpack:///./node_modules/terra-dev-site/lib/loader-components/_NpmBadge.js","webpack:///./node_modules/terra-dev-site/lib/loader-components/NpmBadge.module.scss?1d27","webpack:///./packages/terra-disclosure-manager/package.json","webpack:///./packages/terra-disclosure-manager/lib/terra-dev-site/doc/disclosure-manager/UpgradeGuide.6.doc.mdx"],"names":["Object","defineProperty","exports","value","default","_react","_interopRequireDefault","_propTypes","_bind","_NpmBadgeModule","obj","__esModule","cx","bind","propTypes","name","string","isRequired","url","version","NpmBadge","_ref","createElement","className","href","concat","_default","module","Badge","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6FAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASC,EAAuB,EAAQ,IAExCC,EAAaD,EAAuB,EAAQ,IAE5CE,EAAQF,EAAuB,EAAQ,IAEvCG,EAAkBH,EAAuB,EAAQ,OAErD,SAASA,EAAuBI,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAEvF,IAAIE,EAAKJ,EAAMJ,QAAQS,KAAKJ,EAAgBL,SAExCU,EAAY,CAIdC,KAAMR,EAAWH,QAAQY,OAAOC,WAKhCC,IAAKX,EAAWH,QAAQY,OAKxBG,QAASZ,EAAWH,QAAQY,OAAOC,YAGjCG,EAAW,SAAkBC,GAC/B,IAAIN,EAAOM,EAAKN,KACZG,EAAMG,EAAKH,IACXC,EAAUE,EAAKF,QACnB,OAAOd,EAAOD,QAAQkB,cAAc,MAAO,CACzCC,UAAWX,EAAG,oBACbP,EAAOD,QAAQkB,cAAc,IAAK,CACnCC,UAAWX,EAAG,SACdY,KAAMN,GAAO,iCAAiCO,OAAOV,EAAM,OAAOU,OAAON,IACxEd,EAAOD,QAAQkB,cAAc,OAAQ,CACtCC,UAAWX,EAAG,eACbM,EAAM,UAAY,OAAQb,EAAOD,QAAQkB,cAAc,OAAQ,CAChEC,UAAWX,EAAG,kBACb,IAAIa,OAAON,OAGhBC,EAASN,UAAYA,EACrB,IAAIY,EAAWN,EACflB,EAAQE,QAAUsB,G,qBCrDlBC,EAAOzB,QAAU,CAAC,MAAQ,iCAAiC,kBAAkB,2CAA2C,aAAa,sCAAsC,gBAAgB,2C,kCCD3L,yEAGa0B,EAAQ,SAAC,GAAD,IAAGV,EAAH,EAAGA,IAAH,OACf,kBAAC,IAAD,CACEH,KAAK,2BACLI,QAAQ,SACRD,IAAKA,M,iJCKPW,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,sBACD,OAAO,cALS,UAKT,OAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,cAAC,IAAD,CAAOA,QAAQ,UACf,mBAAQ,CACN,GAAM,4BADR,4BAGA,kfACA,2DAAwC,4BAAYC,WAAW,KAAvB,OAAxC,uDAA+I,4BAAYA,WAAW,KAAvB,2BAA/I,gHAAmU,4BAAYA,WAAW,KAAvB,OAAnU,6BAAgZ,4BAAYA,WAAW,KAAvB,2BAAhZ,8BAAkf,4BAAYA,WAAW,KAAvB,qBAAlf,MACA,8BAAW,4BAAYA,WAAW,KAAvB,qBAAX,uCAAgH,4BAAYA,WAAW,KAAvB,OAAhH,4JAA4T,4BAAYA,WAAW,KAAvB,sBAA5T,2DAAsb,4BAAYA,WAAW,KAAvB,0BAAtb,oCAA6hB,4BAAYA,WAAW,KAAvB,4BAA7hB,4DACA,mDAAgC,4BAAYA,WAAW,KAAvB,OAAhC,0GAA0L,4BAAYA,WAAW,KAAvB,qBAA1L,yFAAiV,4BAAYA,WAAW,KAAvB,2BAAjV,8CAAmc,4BAAYA,WAAW,KAAvB,OAAnc,6QACA,iLACA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,u2CA8DTJ,EAAWK,gBAAiB","file":"302-4faf0271e076e078acc6.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _NpmBadgeModule = _interopRequireDefault(require(\"./NpmBadge.module.scss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cx = _bind.default.bind(_NpmBadgeModule.default);\n\nvar propTypes = {\n  /**\n   * component name.\n   */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n   * url to link to\n   */\n  url: _propTypes.default.string,\n\n  /**\n   * The package version.\n   */\n  version: _propTypes.default.string.isRequired\n};\n\nvar NpmBadge = function NpmBadge(_ref) {\n  var name = _ref.name,\n      url = _ref.url,\n      version = _ref.version;\n  return _react.default.createElement(\"div\", {\n    className: cx('badge-container')\n  }, _react.default.createElement(\"a\", {\n    className: cx('badge'),\n    href: url || \"https://www.npmjs.org/package/\".concat(name, \"/v/\").concat(version)\n  }, _react.default.createElement(\"span\", {\n    className: cx('badge-name')\n  }, url ? 'package' : 'npm'), _react.default.createElement(\"span\", {\n    className: cx('badge-version')\n  }, \"v\".concat(version))));\n};\n\nNpmBadge.propTypes = propTypes;\nvar _default = NpmBadge;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"NpmBadge-module__badge___3p041\",\"badge-container\":\"NpmBadge-module__badge-container___2W9ft\",\"badge-name\":\"NpmBadge-module__badge-name___2TNAy\",\"badge-version\":\"NpmBadge-module__badge-version___3bRIz\"};","import React from 'react';\nimport NpmBadge from 'terra-dev-site/lib/loader-components/_NpmBadge';\n\nexport const Badge = ({ url }) => (\n      <NpmBadge\n        name=\"terra-disclosure-manager\"\n        version=\"4.32.0\"\n        url={url}\n      />\n    );","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Badge } from 'terra-disclosure-manager/package.json?dev-site-package';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Badge mdxType=\"Badge\" />\n    <h1 {...{\n      \"id\": \"upgrade-guide---v2-to-v3\"\n    }}>{`Upgrade Guide - v2 to v3`}</h1>\n    <p>{`Versions 2.x of the DisclosureManager utilize prop injection to provide child components with functions used to change the DisclosureManager state. With versions 3.x, the DisclosureManager uses React's Context API instead of prop injection to provide those functions. Components that interact with a DisclosureManager (or one of Terra's provided implementations, ModalManager or SlidePanelManager) must be updated to continue getting access to the DisclosureManager APIs.`}</p>\n    <p>{`Components today that receive an `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` prop from a DisclosureManager will need to use the `}<inlineCode parentName=\"p\">{`withDisclosureManager()`}</inlineCode>{` higher order component generator to interface with the DisclosureManager's context. Instead of a prop named `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{`, components wrapped with `}<inlineCode parentName=\"p\">{`withDisclosureManager()`}</inlineCode>{` will receive a prop named `}<inlineCode parentName=\"p\">{`disclosureManager`}</inlineCode>{`. `}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`disclosureManager`}</inlineCode>{` prop is equivalent to the previous `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` prop; it has just been renamed to better unify the consumer-facing API conventions with the DisclosureManager itself. As a result of this renaming, the `}<inlineCode parentName=\"p\">{`terra-app-delegate`}</inlineCode>{` package has been deprecated and is no longer used. The `}<inlineCode parentName=\"p\">{`disclosureManagerShape`}</inlineCode>{` object can be imported from the `}<inlineCode parentName=\"p\">{`terra-disclosure-manager`}</inlineCode>{` package instead for use in other propType declarations.`}</p>\n    <p>{`With prop injection, the `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` prop was only provided to immediate children of the DisclosureManager. However, by using context, the `}<inlineCode parentName=\"p\">{`disclosureManager`}</inlineCode>{` value will be exposed to any children of the DisclosureManager that are wrapped with `}<inlineCode parentName=\"p\">{`withDisclosureManager()`}</inlineCode>{`. Components that are currently passing an `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` prop around to their own child components should be able to remove that logic and have those subsequent children interface with the context directly. Components that do not directly interact with the DisclosureManager should be able to safely ignore its existance.`}</p>\n    <p>{`The below examples show contrasting v2.x and v3.x implementations of components that interact with a DisclosureManager (in this case, a ModalManager).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`/**\n * v2.x to v3.x\n */\n import Base from 'terra-base';\n import ModalManager from 'terra-modal-manager'; \n- import AppDelegate from 'terra-app-delegate';\n+ import { withDisclosureManager, disclosureManagerShape } from 'terra-disclosure-manager';\n\n- const MyDisclosureComponent = ({ app }) => (\n+ const MyDisclosureComponent = withDisclosureManager(({ disclosureManager }) => (\n   <Button\n     text=\"Close Modal\"\n     onClick={() => { \n-      app.closeDisclosure();\n+      disclosureManager.closeDisclosure();\n     }}\n   />\n- );\n+ ));\n\n MyDisclosureComponent.propType = {\n-   app: AppDelegate.propType,\n+   disclosureManager: disclosureManagerShape,\n };\n\n- const MyComponent = ({ app }) => (\n+ const MyComponent = withDisclosureManager(({ disclosureManager }) => (\n    <Button\n      text=\"Launch Modal\"\n      onClick={() => { \n-       app.disclose({\n+       disclosureManager.disclose({\n          preferredType: 'modal',\n          content: {\n            key: 'MY-MODAL-DISCLOSURE',\n            component: <MyDisclosureComponent />,\n          }\n        });\n      }}\n   />\n- );\n+ ));\n \n MyComponent.propType = {\n-   app: AppDelegate.propType,\n+   disclosureManager: disclosureManagerShape,\n };\n\n const MyApp = () => (\n   <Base locale=\"en\">\n     <ModalManager>\n       <MyComponent />\n     </ModalManager>\n   </Base>\n );\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}